%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2476 1144
%%HiResBoundingBox: 0 0 2475.1199 1143.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2475.1199 1143.12 re
W
q
[0.24 0 0 -0.24 0 1143.12] cm
q
0 0 10312.5 4762.5 re
W*
q
[3.124985 0 0 3.125305 0.0255922 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3300 1524.85132 re
f
Q
q
[69.996819 0 0 70.00399 205.58524 -483.25842] cm
/DeviceRGB {} CS
[0.5647 0.2471 0.7373] SC
/DeviceRGB {} cs
[0.5647 0.2471 0.7373] sc
4.08 40 m
3.88 40 3.76 39.84 3.76 39.639999 c
3.76 13.959999 l
3.76 13.759999 3.88 13.599999 4.08 13.599999 c
17.68 13.599999 l
17.880001 13.599999 18.040001 13.759999 18.040001 13.959999 c
18.040001 18.24 l
18.040001 18.440001 17.880001 18.6 17.68 18.6 c
9.04 18.6 l
9.04 24.040001 l
15.76 24.040001 l
15.96 24.040001 16.08 24.200001 16.08 24.400002 c
16.08 28.760002 l
16.08 28.960003 15.96 29.120003 15.76 29.120003 c
9.040001 29.120003 l
9.040001 35.000004 l
17.68 35.000004 l
17.880001 35.000004 18.040001 35.160004 18.040001 35.360004 c
18.040001 39.640003 l
18.040001 39.840004 17.880001 40.000004 17.68 40.000004 c
4.08 40.000004 l
4.08 40 l
h
6.08 16.120001 m
6.08 37.400002 l
6.08 37.640003 6.24 37.720001 6.4 37.720001 c
15.6 37.720001 l
15.96 37.720001 15.88 37.240002 15.6 37.240002 c
6.6 37.240002 l
6.6 26.800003 l
13.960001 26.800003 l
14.200001 26.800003 14.200001 26.240004 13.960001 26.240004 c
6.600001 26.240004 l
6.600001 16.320003 l
15.6 16.320003 l
15.88 16.320003 15.96 15.800003 15.6 15.800003 c
6.400001 15.800003 l
6.240001 15.800003 6.08 15.920003 6.08 16.120003 c
6.08 16.120001 l
h
30.429001 13.6 m
30.629002 13.6 30.789001 13.76 30.789001 13.96 c
30.789001 34.959999 l
39.429001 34.959999 l
39.629002 34.959999 39.789001 35.119999 39.789001 35.32 c
39.789001 39.639999 l
39.789001 39.84 39.629002 40 39.429001 40 c
25.868999 40 l
25.668999 40 25.549 39.84 25.549 39.639999 c
25.549 13.959999 l
25.549 13.759999 25.669001 13.599999 25.868999 13.599999 c
30.428999 13.599999 l
30.429001 13.6 l
h
27.948999 16.040001 m
27.948999 37.560001 l
27.948999 37.640003 28.028999 37.760002 28.188999 37.760002 c
37.429001 37.760002 l
37.749001 37.760002 37.749001 37.240002 37.429001 37.240002 c
28.389 37.240002 l
28.389 16.040001 l
28.389 15.760001 27.948999 15.720001 27.948999 16.040001 c
h
46.338001 24.16 m
55.938004 24.16 l
56.058002 24.16 56.218002 24.360001 56.218002 24.440001 c
56.218002 27.960001 l
56.218002 28.160002 56.058002 28.240002 55.938004 28.240002 c
46.338005 28.240002 l
46.138004 28.240002 45.938004 28.160002 45.938004 27.960001 c
45.938004 24.440001 l
45.938004 24.24 46.138004 24.16 46.338005 24.16 c
46.338001 24.16 l
h
47.978001 26.040001 m
47.618 26.040001 47.618 26.52 47.978001 26.52 c
54.257999 26.52 l
54.577999 26.52 54.577999 26.040001 54.257999 26.040001 c
47.978001 26.040001 l
h
67.366997 18.6 m
61.686996 18.6 l
61.486996 18.6 61.326996 18.440001 61.326996 18.24 c
61.326996 13.959999 l
61.326996 13.759999 61.486996 13.599999 61.686996 13.599999 c
78.366997 13.599999 l
78.566994 13.599999 78.726997 13.759999 78.726997 13.959999 c
78.726997 18.24 l
78.726997 18.440001 78.566994 18.6 78.366997 18.6 c
72.686996 18.6 l
72.686996 39.639999 l
72.686996 39.84 72.526993 40 72.326996 40 c
67.726997 40 l
67.527 40 67.366997 39.84 67.366997 39.639999 c
67.366997 18.599998 l
67.366997 18.6 l
h
75.927002 15.8 m
63.847 15.8 l
63.567001 15.8 63.567001 16.32 63.847 16.32 c
69.766998 16.32 l
69.766998 37.52 l
69.766998 37.799999 70.286995 37.799999 70.286995 37.52 c
70.286995 16.32 l
75.926994 16.32 l
76.326996 16.32 76.286995 15.799999 75.926994 15.799999 c
75.927002 15.8 l
h
100.075996 29.559999 m
99.515999 30.719999 98.715996 31.599998 97.595993 32.119999 c
100.955994 39.52 l
101.075996 39.760002 100.915993 40 100.675995 40 c
95.755997 40 l
95.595993 40 95.515999 39.919998 95.475998 39.799999 c
92.355995 33 l
90.315994 33 l
90.315994 39.639999 l
90.315994 39.84 90.155991 40 89.955994 40 c
85.355995 40 l
85.195992 40 85.075996 39.84 85.075996 39.639999 c
85.075996 13.959999 l
85.075996 13.759999 85.195999 13.599999 85.355995 13.599999 c
93.675995 13.599999 l
98.115997 13.599999 100.795998 16.119999 100.795998 20.799999 c
100.795998 25.84 l
100.795998 27.24 100.556 28.559999 100.075996 29.559999 c
h
95.556 24.6 m
95.556 22 l
95.556 19.200001 94.515999 18.92 91.475998 18.92 c
90.315994 18.92 l
90.315994 27.76 l
91.475998 27.76 l
93.995995 27.76 95.475998 27.719999 95.556 24.6 c
h
87.996002 37.560001 m
87.996002 30.720001 l
93.756004 30.720001 l
97.116005 37.639999 l
97.196007 37.84 97.676003 37.759998 97.556007 37.399998 c
94.196007 30.599998 l
97.31601 30.159998 98.396004 28.519999 98.396004 25.559998 c
98.396004 20.559998 l
98.396004 16.159998 94.396004 15.799997 93.156006 15.799997 c
87.756004 15.799997 l
87.676003 15.799997 87.516006 15.919997 87.516006 16.039997 c
87.516006 37.559998 l
87.516006 37.839996 87.99601 37.839996 87.99601 37.559998 c
87.996002 37.560001 l
h
97.916 20.559999 m
97.916 25.559999 l
97.916 29.639999 95.316002 30.199999 92.795998 30.199999 c
87.995995 30.199999 l
87.995995 16.32 l
93.155991 16.32 l
97.47599 16.32 97.915993 19.24 97.915993 20.559999 c
97.916 20.559999 l
h
108.945 40 m
108.745003 40 108.625 39.84 108.625 39.639999 c
108.625 13.959999 l
108.625 13.759999 108.745003 13.599999 108.945 13.599999 c
113.504997 13.599999 l
113.704994 13.599999 113.864998 13.759999 113.864998 13.959999 c
113.864998 39.639999 l
113.864998 39.84 113.704994 40 113.504997 40 c
108.945 40 l
h
111.025002 16 m
111.025002 37.559998 l
111.025002 37.919998 111.465004 37.919998 111.465004 37.559998 c
111.465004 15.999998 l
111.465004 15.719998 111.025002 15.719998 111.025002 15.999998 c
111.025002 16 l
h
130.574005 13.6 m
135.014008 13.6 137.694 16.120001 137.694 20.799999 c
137.694 25.84 l
137.694 30.120001 135.054001 33 130.574005 33 c
127.214005 33 l
127.214005 39.639999 l
127.214005 39.84 127.054001 40 126.854004 40 c
122.254005 40 l
122.094002 40 121.974007 39.84 121.974007 39.639999 c
121.974007 13.959999 l
121.974007 13.759999 122.094009 13.599999 122.254005 13.599999 c
130.574005 13.599999 l
130.574005 13.6 l
h
132.453995 24.639999 m
132.453995 22 l
132.453995 19.24 131.173996 18.959999 128.373993 18.959999 c
127.213989 18.959999 l
127.213989 27.759998 l
128.373993 27.759998 l
130.57399 27.759998 132.453995 27.359999 132.453995 24.639999 c
h
135.294006 25.559999 m
135.294006 20.559999 l
135.294006 16.16 131.894012 15.799999 130.054001 15.799999 c
124.653999 15.799999 l
124.573997 15.799999 124.414001 15.919999 124.414001 16.039999 c
124.414001 37.559998 l
124.414001 37.839996 124.894005 37.839996 124.894005 37.559998 c
124.894005 30.759998 l
129.694 30.759998 l
133.214005 30.759998 135.294006 29.519999 135.294006 25.559998 c
135.294006 25.559999 l
h
124.893997 16.32 m
130.054001 16.32 l
134.494003 16.32 134.774002 19.24 134.774002 20.559999 c
134.774002 25.559999 l
134.774002 29.639999 132.214005 30.199999 129.694 30.199999 c
124.893997 30.199999 l
124.893997 16.32 l
h
f
Q
q
[75.027397 0 0 75.035088 1406.26855 2784.1223] cm
/DeviceRGB {} CS
[0.5647 0.2471 0.7373] SC
/DeviceRGB {} cs
[0.5647 0.2471 0.7373] sc
2.94 20.040001 m
1.32 20.040001 0 18.720001 0 17.1 c
0 5.740001 l
1.9 5.740001 l
1.9 17.1 l
1.9 17.68 2.36 18.16 2.94 18.16 c
3.52 18.16 3.98 17.68 3.98 17.1 c
3.98 5.740001 l
5.88 5.740001 l
5.88 17.1 l
5.88 18.720001 4.56 20.040001 2.94 20.040001 c
h
18.800501 20.120001 m
17.2805 20.120001 16.060501 18.880001 16.060501 17.380001 c
16.060501 15.200001 l
18.000502 15.200001 l
18.000502 17.380001 l
18.000502 17.820002 18.360502 18.18 18.800501 18.18 c
19.240499 18.18 19.580502 17.82 19.580502 17.380001 c
19.580502 15.480001 l
16.060501 10.620001 l
16.060501 8.140001 l
16.060501 6.620001 17.2805 5.380001 18.800501 5.380001 c
20.300501 5.380001 21.5205 6.620001 21.5205 8.140001 c
21.5205 10.300001 l
19.5805 10.300001 l
19.5805 8.140001 l
19.5805 7.680001 19.240499 7.340001 18.800499 7.340001 c
18.360498 7.340001 18.0005 7.680001 18.0005 8.140001 c
18.0005 9.960001 l
21.5205 14.820002 l
21.5205 17.380001 l
21.5205 18.880001 20.300501 20.120001 18.800501 20.120001 c
h
34.441002 20.120001 m
32.921001 20.120001 31.701002 18.880001 31.701002 17.380001 c
31.701002 15.200001 l
33.641003 15.200001 l
33.641003 17.380001 l
33.641003 17.820002 34.001003 18.18 34.441002 18.18 c
34.881001 18.18 35.221001 17.82 35.221001 17.380001 c
35.221001 15.480001 l
31.701 10.620001 l
31.701 8.140001 l
31.701 6.620001 32.921001 5.380001 34.441002 5.380001 c
35.941002 5.380001 37.161003 6.620001 37.161003 8.140001 c
37.161003 10.300001 l
35.221004 10.300001 l
35.221004 8.140001 l
35.221004 7.680001 34.881004 7.340001 34.441006 7.340001 c
34.001007 7.340001 33.641006 7.680001 33.641006 8.140001 c
33.641006 9.960001 l
37.161007 14.820002 l
37.161007 17.380001 l
37.161007 18.880001 35.941006 20.120001 34.441006 20.120001 c
34.441002 20.120001 l
h
49.2215 18.120001 m
51.981499 18.120001 l
51.981499 20 l
47.341499 20 l
47.341499 5.64 l
49.2215 5.64 l
49.2215 18.119999 l
49.2215 18.120001 l
h
64.862 20.02 m
63.362 20.02 62.161999 18.800001 62.161999 17.32 c
62.161999 8.34 l
62.161999 6.86 63.362 5.66 64.862 5.66 c
66.342003 5.66 67.542 6.86 67.542 8.34 c
67.542 17.32 l
67.542 18.799999 66.342003 20.02 64.862 20.02 c
h
64.862 7.56 m
64.421997 7.56 64.082001 7.92 64.082001 8.34 c
64.082001 17.32 l
64.082001 17.76 64.421997 18.1 64.862 18.1 c
65.281998 18.1 65.641998 17.76 65.641998 17.32 c
65.641998 8.34 l
65.641998 7.92 65.281998 7.56 64.862 7.56 c
64.862 7.56 l
h
82.362503 16.719999 m
82.442505 5.639999 l
84.362503 5.639999 l
84.2425 20.079998 l
81.262497 20.079998 l
79.642494 8.899998 l
79.642494 20.079998 l
77.722496 20.079998 l
77.722496 5.639998 l
80.822495 5.639998 l
82.362503 16.719999 l
h
97.443001 20.16 m
97.002998 20.16 l
95.602997 20.16 94.483002 19.039999 94.483002 17.639999 c
94.483002 7.999999 l
94.483002 6.599999 95.603004 5.459999 97.002998 5.459999 c
97.443001 5.459999 l
98.843002 5.459999 99.962997 6.599999 99.962997 7.999999 c
99.962997 9.019999 l
98.002998 9.019999 l
98.002998 7.999999 l
98.002998 7.659998 97.763 7.419999 97.443001 7.419999 c
97.002998 7.419999 l
96.702995 7.419999 96.422997 7.659999 96.422997 7.999999 c
96.422997 17.639999 l
96.422997 17.939999 96.702995 18.219999 97.002998 18.219999 c
97.443001 18.219999 l
97.763 18.219999 98.002998 17.939999 98.002998 17.639999 c
98.002998 12.44 l
96.882996 12.44 l
96.882996 10.5 l
99.962997 10.5 l
99.962997 17.639999 l
99.962997 19.039999 98.842995 20.16 97.443001 20.16 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
